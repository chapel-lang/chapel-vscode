{
  "name": "chapel-vscode",
  "displayName": "Chapel Language",
  "description": "A collection of development tools for programming in Chapel",
  "version": "0.0.12",
  "engines": {
    "vscode": "^1.70.0"
  },
  "publisher": "chpl-hpe",
  "author": {
    "name": "Chapel"
  },
  "categories": [
    "Programming Languages",
    "Linters",
    "Snippets",
    "Other"
  ],
  "keywords": [
    "chapel"
  ],
  "main": "./out/extension.js",
  "icon": "./icons/chapel.png",
  "license": "SEE LICENSE IN LICENSE",
  "bugs": {
    "url": "https://github.com/chapel-lang/chapel-vscode/issues"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/chapel-lang/chapel-vscode.git"
  },
  "activationEvents": [
    "onLanguage:chapel",
    "onLanguage:chapel-ast",
    "workspaceContains:**/*.chpl"
  ],
  "contributes": {
    "languages": [
      {
        "id": "chapel",
        "aliases": [
          "chapel"
        ],
        "extensions": [
          ".chpl"
        ],
        "configuration": "./chapel-language-configuration.json",
        "icon": {
          "light": "./icons/chapel.png",
          "dark": "./icons/chapel.png"
        }
      },
      {
        "id": "chapel-ast",
        "aliases": [
          "chapel-ast"
        ],
        "extensions": [
          ".ast"
        ],
        "configuration": "./chapel-ast-language-configuration.json"
      }
    ],
    "breakpoints": [
      {
        "language": "chapel"
      }
    ],
    "snippets": [
      {
        "language": "chapel",
        "path": "./snippets/chapel.json"
      }
    ],
    "grammars": [
      {
        "language": "chapel",
        "scopeName": "source.chapel",
        "path": "./syntaxes/chapel.tmLanguage.json"
      },
      {
        "language": "chapel-ast",
        "scopeName": "source.chapelAst",
        "path": "./syntaxes/chapel-ast.tmLanguage.json"
      }
    ],
    "commands": [
      {
        "command": "chapel.findChplHome",
        "title": "Find CHPL_HOME",
        "category": "chapel"
      },
      {
        "command": "chplcheck.restart",
        "title": "Restart chplcheck",
        "category": "chapel"
      },
      {
        "command": "chpl-language-server.restart",
        "title": "Restart chpl-language-server",
        "category": "chapel"
      },
      {
        "command": "chapel.createDebugConfig",
        "title": "Create a debug launch.json for Chapel",
        "category": "chapel"
      },
      {
        "command": "chapel.createDebugConfigForActiveFile",
        "title": "Create a debug launch.json for the active Chapel file",
        "category": "chapel",
        "enablement": "editorLangId == 'chapel'"
      },
      {
        "command": "chapel.runFileTask",
        "title": "Run File",
        "category": "chapel",
        "icon": "$(play)",
        "shortTitle": "Run",
        "enablement": "editorLangId == 'chapel'"
      },
      {
        "command": "chapel.mason.build",
        "title": "mason build",
        "category": "mason",
        "icon": "$(tools)"
      },
      {
        "command": "chapel.mason.run",
        "title": "mason run",
        "category": "mason",
        "icon": "$(play)"
      },
      {
        "command": "chapel.mason.test",
        "title": "mason test",
        "category": "mason",
        "icon": "$(beaker)"
      }

    ],
    "menus": {
      "editor/title/run": [
        {
          "command": "chapel.runFileTask",
          "when": "editorLangId == 'chapel'",
          "group": "1_run"
        },
        {
          "command": "chapel.mason.build",
          "when": "resourceFilename == 'Mason.toml'",
          "group": "1_mason"
        },
        {
          "command": "chapel.mason.run",
          "when": "resourceFilename == 'Mason.toml'",
          "group": "1_mason"
        },
        {
          "command": "chapel.mason.test",
          "when": "resourceFilename == 'Mason.toml'",
          "group": "1_mason"
        }
      ]
    },
    "taskDefinitions": [
      {
        "type": "chpl",
        "required": [],
        "when": "processExecutionSupported",
        "properties": {
          "rootFile": {
            "type": "string",
            "description": "Not included in compilation, the rootFile is only used to determine what file to show a \"Run\" button for."
          },
          "args": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Arguments to pass to the Chapel compiler"
          },
          "env": {
            "type": "object",
            "description": "Environment variables to set"
          },
          "cwd": {
            "type": "string",
            "description": "The working directory to use when running the task"
          },
          "compiler": {
            "type": "string",
            "description": "The compiler to use. If not provided, the extension will look for chpl in PATH and in CHPL_HOME"
          }
        }
      },
      {
        "type": "chpl-run",
        "required": [
          "executable"
        ],
        "when": "processExecutionSupported",
        "properties": {
          "rootFile": {
            "type": "string",
            "description": "Not included in compilation, the rootFile is only used to determine what file to show a \"Run\" button for."
          },
          "executable": {
            "type": "string",
            "description": "The executable to run. If not provided, the extension will look for the executable in the same directory as the rootFile"
          },
          "numLocales": {
            "type": "string",
            "description": "The number of locales to use. If not provided, the extension will use the default value of 1"
          },
          "args": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Arguments to pass to the executable"
          },
          "env": {
            "type": "object",
            "description": "Environment variables to set"
          },
          "cwd": {
            "type": "string",
            "description": "The working directory to use when running the task"
          }
        }
      },
      {
        "type": "mason",
        "required": [
          "command"
        ],
        "when": "processExecutionSupported",
        "properties": {
          "command": {
            "type": "string",
            "enum": [
              "build",
              "run",
              "test"
            ],
            "description": "The mason command to run"
          },
          "args": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Arguments to pass to the mason command"
          },
          "env": {
            "type": "object",
            "description": "Environment variables to set"
          },
          "cwd": {
            "type": "string",
            "description": "The working directory to use when running mason. This should be the same directory as the Mason.toml file. If not provided the workspace root will be used."
          }
        }
      }
    ],
    "problemMatchers": [
      {
        "name": "chpl-compiler",
        "owner": "chpl",
        "source": "chpl",
        "fileLocation": "absolute",
        "pattern": [
          {
            "regexp": "^(.+):([0-9]+): (error|warning): (.+)$",
            "file": 1,
            "line": 2,
            "column": 0,
            "severity": 3,
            "message": 4
          }
        ]
      }
    ],
    "configuration": [
      {
        "type": "object",
        "title": "Chapel Language Support",
        "properties": {
          "chapel.CHPL_HOME": {
            "scope": "window",
            "type": "string",
            "description": "The path to CHPL_HOME. If not provided, the extension may be able to find it automatically if `chpl`, `chplcheck`, and `chpl-language-server` are in PATH."
          },
          "chapel.CHPL_DEVELOPER": {
            "scope": "window",
            "type": "boolean",
            "default": false,
            "description": "CHPL_DEVELOPER"
          },
          "chapel.chplcheck.enable": {
            "scope": "window",
            "type": "boolean",
            "default": true,
            "description": "Enable chplcheck"
          },
          "chapel.chplcheck.path": {
            "scope": "window",
            "type": "string",
            "description": "An explicit path to the chplcheck executable. If not provided, the extension will look for chplcheck in PATH and in CHPL_HOME"
          },
          "chapel.chplcheck.args": {
            "scope": "window",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Extra arguments to pass to chplcheck"
          },
          "chapel.chpl-language-server.enable": {
            "scope": "window",
            "type": "boolean",
            "default": true,
            "description": "Enable chpl-language-server"
          },
          "chapel.chpl-language-server.path": {
            "scope": "window",
            "type": "string",
            "description": "An explicit path to the chpl-language-server executable. If not provided, the extension will look for chpl-language-server in PATH and in CHPL_HOME"
          },
          "chapel.chpl-language-server.resolver": {
            "scope": "window",
            "type": "boolean",
            "default": false,
            "description": "Enable the dyno resover"
          },
          "chapel.chpl-language-server.args": {
            "scope": "window",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Extra arguments to pass to chpl-language-server"
          },
          "chapel.preferredDebugProvider": {
            "scope": "window",
            "type": "string",
            "description": "The preferred debug provider to use",
            "enum": [
              "vadimcn.vscode-lldb",
              "ms-vscode.cpptools"
            ],
            "default": "ms-vscode.cpptools"
          },
          "chapel.defaultCompiler": {
            "scope": "window",
            "type": "string",
            "description": "The default compiler to use for Chapel. If not provided, the extension will look for chpl in PATH and in CHPL_HOME"
          },
          "chapel.defaultMason": {
            "scope": "window",
            "type": "string",
            "description": "The default path to 'mason'. If not provided, the extension will look for mason in PATH and in CHPL_HOME"
          },
          "chapel.baseEnv": {
            "scope": "window",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Environment variables to set for all Chapel tasks. This is generally only needed if you to set specific Chapel environment variables to a non-default value. These can be overridden on a per-task basis using the 'env' property of a task."
          }
        }
      }
    ],
    "configurationDefaults": {
      "[chapel]": {
        "editor.semanticHighlighting.enabled": true
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "lint": "eslint src --ext ts",
    "pretest": "npm run compile && npm run lint",
    "test": ""
  },
  "devDependencies": {
    "@types/node": "18.x",
    "@types/vscode": "^1.70.0",
    "@typescript-eslint/eslint-plugin": "^8.3.5",
    "@typescript-eslint/parser": "^8.3.5",
    "@vscode/test-electron": "^2.3.6",
    "@vscode/vsce": "^3.6.0",
    "ovsx": "^0.10.4",
    "eslint": "^9.29.0",
    "typescript": "^5.2.2"
  },
  "dependencies": {
    "vscode-languageclient": "^8.0.2"
  }
}
